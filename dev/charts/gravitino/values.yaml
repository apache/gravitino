#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
image:
  repository: apache/gravitino
  tag: 0.9.0-incubating-SNAPSHOT
  pullPolicy: IfNotPresent
  ## Optionally specify an array of pullSecrets (secrets must be manually created in the namespace)
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## Example:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []

# Deploy MySQL instance on K8S cluster as Gravitino storage backend.
mysql:
  enabled: false
  initdbScriptsConfigMap: gravitino-mysql-init
  auth:
    rootPassword: admin
    createDatabase: true
    database: gravitino
    username: gravitino
    password: gravitino

# Use H2 as the default embedded database, or set up an external database for enhanced scalability and performance.
# schema-0.*.0-mysql.sql is the data init script that should be executed in the external database manually.
entity:
  store: relational
  maxTransactionSkewTimeMs: 2000
  deleteAfterTimeMs: 604800000
  versionRetentionCount: 1
  relationalBackend: JDBCBackend
  jdbcUrl: jdbc:h2
  jdbcDriver: org.h2.Driver
  jdbcUser: gravitino
  jdbcPassword: gravitino
  storagePath: /root/gravitino/data/jdbc

server:
  shutdownTimeout: 3000
  rest:
    extensionPackages: ""

webserver:
  host: 0.0.0.0
  httpPort: 8090
  minThreads: 24
  maxThreads: 200
  stopTimeout: 30000
  idleTimeout: 30000
  threadPoolWorkQueueSize: 100
  requestHeaderSize: 131072
  responseHeaderSize: 131072
  customFilters: ""

catalog:
  cacheEvictionIntervalMs: 3600000
  classloader:
    isolated: true

authorization:
  enable: false
  serviceAdmins: anonymous

auxService:
  names: iceberg-rest

icebergRest:
  classpath: "iceberg-rest-server/libs, iceberg-rest-server/conf"
  host: 0.0.0.0
  httpPort: 9001
  catalogBackend: memory
  warehouse: /gravitino.conf/

authenticators: simple

authenticator:
  oauth:
    serviceAudience: test
    defaultSignKey: MIIAIjBNBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqmmqfSy8vH9BMKZLIjPHNTClH7yyykV/J/dfNwwicoYCBQgLOLRq59nAiJ9/WOkIq7zIXQ8iZU5XmI0bRSo3Ah7G4uF6CUbpny+n4zxwTfEEJ3dVC1Aa1g3DZbf8mN76B2ykf6z4FEbTWVBp0xMZ14YBOIuOUkN4F/x8bQNYRPl0yepLBZf6uY26f2o5+yKBcpAk7K/pGoD4v+DKpt/A8bvf4fy3JpZERsMPS/veeyIqR6f+455KLjRabBpxl5xIo8iUer5O0Ci8xbQMci4ErRRemm5n1e74Kqpz5u/TcLIPdMLXJ57fLl9t7V9BtLyRTjyooJpnl/lz+kJ+VIt1kQICNPMB
    serverUri: http://57.185.211.74:8080
    tokenPath: /realms/myrealm/protocol/openid-connect/token

audit:
  enabled: false
  writer:
    className: org.apache.gravitino.audit.FileAuditWriter
    file:
      fileName: gravitino_audit.log
      flushIntervalSecs: 10
      append: true
  formatter:
    className: org.apache.gravitino.audit.SimpleFormatter

metrics:
  timeSlidingWindowSecs: 60

visibleConfigs: ""
# visibleConfigs: "gravitino.datastrato.custom.authorization.ranger.admin.url,gravitino.datastrato.custom.authorization.ranger.username,gravitino.datastrato.custom.authorization.ranger.password,gravitino.datastrato.custom.authorization.ranger.auth.type"

visibleConfigsItems: {}
  # gravitino.datastrato.custom.authorization.ranger.admin.url: "http://ranger:6080"
  # gravitino.datastrato.custom.authorization.ranger.username: admin
  # gravitino.datastrato.custom.authorization.ranger.password: "rangerR0cks!"
  # gravitino.datastrato.custom.authorization.ranger.auth.type: simple

additionalConfigItems: {}
#  gravitino.eventListener.names: "audit,sync"

extraVolumes:
  - name: gravitino-log
    emptyDir: {}

extraVolumeMounts:
  - name: gravitino-log
    mountPath: /root/gravitino/logs

## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
## If you set enabled as "True", you need :
## - create a pv which above 10Gi
## - keep storageClassName same with below setting
persistence:
  enabled: false
  accessModes:
    - ReadWriteOnce
  size: 10Gi
  labels: {}
  annotations: {}
  # existingClaim:
  # storageClassName:

log:
  containerStdout: false

log4j2Properties: {}
  # status: warn

  ## Log files location
  # basePath: "${sys:gravitino.log.path}"
  # serverName: "${sys:gravitino.server.name}"

  ## RollingFileAppender name, pattern, path and rollover policy
  # rollingAppenderType: RollingFile
  # rollingAppenderName: fileLogger
  # rollingAppenderFileName: "${basePath}/${serverName}.log"
  # rollingAppenderFilePattern: "${basePath}/${serverName}_%d{yyyyMMdd}.log.gz"
  # rollingAppenderLayoutType: PatternLayout
  # rollingAppenderLayoutPattern: "%d{yyyy-MM-dd HH:mm:ss.SSS} %level [%t] [%l] - %msg%n"
  # rollingAppenderPoliciesType: Policies

  ## RollingFileAppender rotation policy
  # rollingAppenderPoliciesSizeType: SizeBasedTriggeringPolicy
  # rollingAppenderPoliciesSizeSize: 10MB
  # rollingAppenderPoliciesTimeType: TimeBasedTriggeringPolicy
  # rollingAppenderPoliciesTimeInterval: 1
  # rollingAppenderPoliciesTimeModulate: true
  # rollingAppenderStrategyType: DefaultRolloverStrategy
  # rollingAppenderStrategyDeleteType: Delete
  # rollingAppenderStrategyDeleteBasePath: "${basePath}"
  # rollingAppenderStrategyDeleteMaxDepth: 10
  # rollingAppenderStrategyDeleteIfLastModifiedType: IfLastModified

  ## Delete all files older than 30 days
  # rollingAppenderStrategyDeleteIfLastModifiedAge: 30d

  ## Configure root logger
  # rootLoggerLevel: info
  # rootLoggerAppenderRefRollingRef: fileLogger

additionalLog4j2Properties: {}

## Expose the gravitino service to be accessed from outside the cluster (LoadBalancer service).
## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  name: gravitino
  type: ClusterIP
  port: 8090
  targetPort: 8090
  annotations: {}
  labels: {}
  portName: http
  nodePort: ""

## Additional ports to the gravitino services. Useful to expose extra container ports.
extraExposePorts:
  - port: 9001
    protocol: TCP
    name: http1
    targetPort: 9001

## Deployment annotations
annotations: {}

# Deployment replicas
replicas: 1

## Pod Annotations
podAnnotations: {}

## Pod Labels
podLabels: {}

readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 20
  timeoutSeconds: 5

livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 20
  timeoutSeconds: 5

containerSecurityContext:
  runAsNonRoot: false
  runAsUser: 0

env:
  - name: GRAVITINO_HOME
    value: /root/gravitino

# The envWithTpl array below has the same usage as "env", but is using the tpl function to support templatable string.
# This can be useful when you want to pass dynamic values to the Chart using the helm argument "--set <variable>=<value>"
# https://helm.sh/docs/howto/charts_tips_and_tricks/#using-the-tpl-function
envWithTpl: []
#  - name: FOO_2
#    value: "{{ .Values.foo2 }}"

# foo2: bar2

envFrom: []

resources: {}
  # limits:
  #   cpu: 500m
  #   memory: 512Mi
  # requests:
  #   cpu: 500m
  #   memory: 512Mi

## Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
#
nodeSelector: {}

## Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## Affinity for pod assignment (evaluated as template)
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}
